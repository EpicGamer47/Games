package singlePlayer;

import static common.Piece.*;

import java.util.EnumMap;
import common.Board;
import common.Piece;
import common.Ranker;

public class PointRanker implements Ranker {
	public static EnumMap<Piece, double[]> map;
	
	static {
		map.put(PAWN, new double[] {
                   0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,
                   5.0,  5.0,  5.0,  5.0,  5.0,  5.0,  5.0,  5.0,
                   1.0,  1.0,  2.0,  3.0,  3.0,  2.0,  1.0,  1.0,
                   0.5,  0.5,  1.0,  2.5,  2.5,  1.0,  0.5,  0.5,
                   0.0,  0.0,  0.0,  2.0,  2.0,  0.0,  0.0,  0.0,
                   0.5, -0.5, -1.0,  0.0,  0.0, -1.0, -0.5,  0.5,
                   0.5,  1.0, 1.0,  -2.0, -2.0,  1.0,  1.0,  0.5,
                   0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0
				});
		
		map.put(KNIGHT, new double[] {
				  -5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0,
                  -4.0, -2.0,  0.0,  0.0,  0.0,  0.0, -2.0, -4.0,
                  -3.0,  0.0,  1.0,  1.5,  1.5,  1.0,  0.0, -3.0,
                  -3.0,  0.5,  1.5,  2.0,  2.0,  1.5,  0.5, -3.0,
                  -3.0,  0.0,  1.5,  2.0,  2.0,  1.5,  0.0, -3.0,
                  -3.0,  0.5,  1.0,  1.5,  1.5,  1.0,  0.5, -3.0,
                  -4.0, -2.0,  0.0,  0.5,  0.5,  0.0, -2.0, -4.0,
                  -5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0
				});
		
		map.put(BISHOP, new double[] {
			      -2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0,
			      -1.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -1.0,
			      -1.0,  0.0,  0.5,  1.0,  1.0,  0.5,  0.0, -1.0,
			      -1.0,  0.5,  0.5,  1.0,  1.0,  0.5,  0.5, -1.0,
			      -1.0,  0.0,  1.0,  1.0,  1.0,  1.0,  0.0, -1.0,
			      -1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0, -1.0,
			      -1.0,  0.5,  0.0,  0.0,  0.0,  0.0,  0.5, -1.0,
			      -2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0
				});
		
		map.put(ROOK, new double[] {
				   0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,
			       0.5,  1.0,  1.0,  1.0,  1.0,  1.0,  1.0,  0.5,
			      -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5,
			      -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5,
			      -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5,
			      -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5,
			      -0.5,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -0.5,
			       0.0,   0.0, 0.0,  0.5,  0.5,  0.0,  0.0,  0.0
				});
		
		map.put(QUEEN, new double[] {
				  -2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0,
			      -1.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -1.0,
			      -1.0,  0.0,  0.5,  0.5,  0.5,  0.5,  0.0, -1.0,
			      -0.5,  0.0,  0.5,  0.5,  0.5,  0.5,  0.0, -0.5,
			       0.0,  0.0,  0.5,  0.5,  0.5,  0.5,  0.0, -0.5,
			      -1.0,  0.5,  0.5,  0.5,  0.5,  0.5,  0.0, -1.0,
			      -1.0,  0.0,  0.5,  0.0,  0.0,  0.0,  0.0, -1.0,
			      -2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0
				});
		
		map.put(KING, new double[] {
			      -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0,
			      -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0,
			      -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0,
			      -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0,
			      -2.0, -3.0, -3.0, -4.0, -4.0, -3.0, -3.0, -2.0,
			      -1.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -1.0,
			       2.0,  2.0,  0.0,  0.0,  0.0,  0.0,  2.0,  2.0,
			       2.0,  3.0,  1.0,  0.0,  0.0,  1.0,  3.0,  2.0
				});
	}


	@Override
	public double rank(Board b, int n, int l) {
		long i = 1L << (n + l * 8);
		
		if ((b.white & i) != 0)
			return   map.get(b.board[n + l * 8])[n + l * 8];
		else
			return -(map.get(b.board[n + l * 8])[n + (7 - l) * 8]);
	}
}